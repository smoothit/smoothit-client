##################################################
# file: IoPService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py -b http://localhost:8080/sis/IoPEndpoint?wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://iop.ws.sis.smoothit.eu/
##############################

class ns0:
    targetNamespace = "http://iop.ws.sis.smoothit.eu/"

    class activeInTorrents_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "activeInTorrents")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.activeInTorrents_Def.schema
            TClist = [GTD("http://iop.ws.sis.smoothit.eu/","activeTorrent",lazy=False)(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = []
                    return
            Holder.__name__ = "activeInTorrents_Holder"
            self.pyclass = Holder

    class activeTorrent_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "activeTorrent")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.activeTorrent_Def.schema
            TClist = [ZSI.TC.String(pname="infohash", aname="_infohash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="maxPeers", aname="_maxPeers", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="seeds", aname="_seeds", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._infohash = None
                    self._maxPeers = None
                    self._seeds = None
                    return
            Holder.__name__ = "activeTorrent_Holder"
            self.pyclass = Holder

    class activeInTorrentsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "activeInTorrentsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.activeInTorrentsResponse_Def.schema
            TClist = [GTD("http://iop.ws.sis.smoothit.eu/","responseEntry",lazy=False)(pname=(ns,"response"), aname="_response", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._response = []
                    return
            Holder.__name__ = "activeInTorrentsResponse_Holder"
            self.pyclass = Holder

    class responseEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "responseEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.responseEntry_Def.schema
            TClist = [GTD("http://iop.ws.sis.smoothit.eu/","peerInfo",lazy=False)(pname="peers", aname="_peers", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="torrentID", aname="_torrentID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._peers = []
                    self._torrentID = None
                    return
            Holder.__name__ = "responseEntry_Holder"
            self.pyclass = Holder

    class peerInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "peerInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.peerInfo_Def.schema
            TClist = [ZSI.TC.String(pname="ipAddress", aname="_ipAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="port", aname="_port", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ipAddress = None
                    self._port = None
                    return
            Holder.__name__ = "peerInfo_Holder"
            self.pyclass = Holder

    class getTorrentStats_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "getTorrentStats")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getTorrentStats_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="arg0", aname="_arg0", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    return
            Holder.__name__ = "getTorrentStats_Holder"
            self.pyclass = Holder

    class getTorrentStatsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "getTorrentStatsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getTorrentStatsResponse_Def.schema
            TClist = [GTD("http://iop.ws.sis.smoothit.eu/","torrentStat",lazy=False)(pname=(ns,"stats"), aname="_stats", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._stats = []
                    return
            Holder.__name__ = "getTorrentStatsResponse_Holder"
            self.pyclass = Holder

    class torrentStat_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "torrentStat")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.torrentStat_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname="rate", aname="_rate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="torrentHash", aname="_torrentHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="torrentURL", aname="_torrentURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._rate = None
                    self._torrentHash = None
                    self._torrentURL = None
                    return
            Holder.__name__ = "torrentStat_Holder"
            self.pyclass = Holder

    class reportActivity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "reportActivity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.reportActivity_Def.schema
            TClist = [GTD("http://iop.ws.sis.smoothit.eu/","activityReport",lazy=False)(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    return
            Holder.__name__ = "reportActivity_Holder"
            self.pyclass = Holder

    class activityReport_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "activityReport")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.activityReport_Def.schema
            TClist = [GTD("http://iop.ws.sis.smoothit.eu/","activityReportEntry",lazy=False)(pname="entries", aname="_entries", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="extentions", aname="_extentions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipAddress", aname="_ipAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="port", aname="_port", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._entries = []
                    self._extentions = []
                    self._ipAddress = None
                    self._port = None
                    return
            Holder.__name__ = "activityReport_Holder"
            self.pyclass = Holder

    class activityReportEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "activityReportEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.activityReportEntry_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname="fileSize", aname="_fileSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="progress", aname="_progress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="torrentID", aname="_torrentID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="torrentURL", aname="_torrentURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._fileSize = None
                    self._progress = None
                    self._torrentID = None
                    self._torrentURL = None
                    return
            Holder.__name__ = "activityReportEntry_Holder"
            self.pyclass = Holder

    class reportActivityResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "reportActivityResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.reportActivityResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "reportActivityResponse_Holder"
            self.pyclass = Holder

    class getConfigParams_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "getConfigParams")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getConfigParams_Def.schema
            TClist = [ZSI.TC.String(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    return
            Holder.__name__ = "getConfigParams_Holder"
            self.pyclass = Holder

    class getConfigParamsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "getConfigParamsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getConfigParamsResponse_Def.schema
            TClist = [GTD("http://iop.ws.sis.smoothit.eu/","configParams",lazy=False)(pname=(ns,"config"), aname="_config", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._config = None
                    return
            Holder.__name__ = "getConfigParamsResponse_Holder"
            self.pyclass = Holder

    class configParams_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "configParams")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.configParams_Def.schema
            TClist = [ZSI.TCnumbers.FPfloat(pname="d", aname="_d", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="dlow", aname="_dlow", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="localIPRanges", aname="_localIPRanges", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="mode", aname="_mode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="remotes", aname="_remotes", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="slots", aname="_slots", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="t", aname="_t", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="u", aname="_u", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="ulow", aname="_ulow", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname="x", aname="_x", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._d = None
                    self._dlow = None
                    self._localIPRanges = []
                    self._mode = None
                    self._remotes = None
                    self._slots = None
                    self._t = None
                    self._u = None
                    self._ulow = None
                    self._x = None
                    return
            Holder.__name__ = "configParams_Holder"
            self.pyclass = Holder

    class activeInTorrents_Dec(ElementDeclaration):
        literal = "activeInTorrents"
        schema = "http://iop.ws.sis.smoothit.eu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://iop.ws.sis.smoothit.eu/","activeInTorrents")
            kw["aname"] = "_activeInTorrents"
            if ns0.activeInTorrents_Def not in ns0.activeInTorrents_Dec.__bases__:
                bases = list(ns0.activeInTorrents_Dec.__bases__)
                bases.insert(0, ns0.activeInTorrents_Def)
                ns0.activeInTorrents_Dec.__bases__ = tuple(bases)

            ns0.activeInTorrents_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "activeInTorrents_Dec_Holder"

    class activeInTorrentsResponse_Dec(ElementDeclaration):
        literal = "activeInTorrentsResponse"
        schema = "http://iop.ws.sis.smoothit.eu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://iop.ws.sis.smoothit.eu/","activeInTorrentsResponse")
            kw["aname"] = "_activeInTorrentsResponse"
            if ns0.activeInTorrentsResponse_Def not in ns0.activeInTorrentsResponse_Dec.__bases__:
                bases = list(ns0.activeInTorrentsResponse_Dec.__bases__)
                bases.insert(0, ns0.activeInTorrentsResponse_Def)
                ns0.activeInTorrentsResponse_Dec.__bases__ = tuple(bases)

            ns0.activeInTorrentsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "activeInTorrentsResponse_Dec_Holder"

    class getConfigParams_Dec(ElementDeclaration):
        literal = "getConfigParams"
        schema = "http://iop.ws.sis.smoothit.eu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://iop.ws.sis.smoothit.eu/","getConfigParams")
            kw["aname"] = "_getConfigParams"
            if ns0.getConfigParams_Def not in ns0.getConfigParams_Dec.__bases__:
                bases = list(ns0.getConfigParams_Dec.__bases__)
                bases.insert(0, ns0.getConfigParams_Def)
                ns0.getConfigParams_Dec.__bases__ = tuple(bases)

            ns0.getConfigParams_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getConfigParams_Dec_Holder"

    class getConfigParamsResponse_Dec(ElementDeclaration):
        literal = "getConfigParamsResponse"
        schema = "http://iop.ws.sis.smoothit.eu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://iop.ws.sis.smoothit.eu/","getConfigParamsResponse")
            kw["aname"] = "_getConfigParamsResponse"
            if ns0.getConfigParamsResponse_Def not in ns0.getConfigParamsResponse_Dec.__bases__:
                bases = list(ns0.getConfigParamsResponse_Dec.__bases__)
                bases.insert(0, ns0.getConfigParamsResponse_Def)
                ns0.getConfigParamsResponse_Dec.__bases__ = tuple(bases)

            ns0.getConfigParamsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getConfigParamsResponse_Dec_Holder"

    class getTorrentStats_Dec(ElementDeclaration):
        literal = "getTorrentStats"
        schema = "http://iop.ws.sis.smoothit.eu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://iop.ws.sis.smoothit.eu/","getTorrentStats")
            kw["aname"] = "_getTorrentStats"
            if ns0.getTorrentStats_Def not in ns0.getTorrentStats_Dec.__bases__:
                bases = list(ns0.getTorrentStats_Dec.__bases__)
                bases.insert(0, ns0.getTorrentStats_Def)
                ns0.getTorrentStats_Dec.__bases__ = tuple(bases)

            ns0.getTorrentStats_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getTorrentStats_Dec_Holder"

    class getTorrentStatsResponse_Dec(ElementDeclaration):
        literal = "getTorrentStatsResponse"
        schema = "http://iop.ws.sis.smoothit.eu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://iop.ws.sis.smoothit.eu/","getTorrentStatsResponse")
            kw["aname"] = "_getTorrentStatsResponse"
            if ns0.getTorrentStatsResponse_Def not in ns0.getTorrentStatsResponse_Dec.__bases__:
                bases = list(ns0.getTorrentStatsResponse_Dec.__bases__)
                bases.insert(0, ns0.getTorrentStatsResponse_Def)
                ns0.getTorrentStatsResponse_Dec.__bases__ = tuple(bases)

            ns0.getTorrentStatsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getTorrentStatsResponse_Dec_Holder"

    class reportActivity_Dec(ElementDeclaration):
        literal = "reportActivity"
        schema = "http://iop.ws.sis.smoothit.eu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://iop.ws.sis.smoothit.eu/","reportActivity")
            kw["aname"] = "_reportActivity"
            if ns0.reportActivity_Def not in ns0.reportActivity_Dec.__bases__:
                bases = list(ns0.reportActivity_Dec.__bases__)
                bases.insert(0, ns0.reportActivity_Def)
                ns0.reportActivity_Dec.__bases__ = tuple(bases)

            ns0.reportActivity_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "reportActivity_Dec_Holder"

    class reportActivityResponse_Dec(ElementDeclaration):
        literal = "reportActivityResponse"
        schema = "http://iop.ws.sis.smoothit.eu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://iop.ws.sis.smoothit.eu/","reportActivityResponse")
            kw["aname"] = "_reportActivityResponse"
            if ns0.reportActivityResponse_Def not in ns0.reportActivityResponse_Dec.__bases__:
                bases = list(ns0.reportActivityResponse_Dec.__bases__)
                bases.insert(0, ns0.reportActivityResponse_Def)
                ns0.reportActivityResponse_Dec.__bases__ = tuple(bases)

            ns0.reportActivityResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "reportActivityResponse_Dec_Holder"

# end class ns0 (tns: http://iop.ws.sis.smoothit.eu/)
