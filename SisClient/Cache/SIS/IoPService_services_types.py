################################################## 
# IoPService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://iop.ws.sis.smoothit.eu/
##############################

class ns0:
    targetNamespace = "http://iop.ws.sis.smoothit.eu/"

    class getStats_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "getStats")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getStats_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getStats_Holder"
            self.pyclass = Holder

    class getStatsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "getStatsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getStatsResponse_Def.schema
            TClist = [GTD("http://iop.ws.sis.smoothit.eu/","torrentStat",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getStatsResponse_Holder"
            self.pyclass = Holder

    class torrentStat_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "torrentStat")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.torrentStat_Def.schema
            TClist = [ZSI.TC.Boolean(pname="available", aname="_available", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="noOfLeechers", aname="_noOfLeechers", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="noOfLocalSeeds", aname="_noOfLocalSeeds", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="noOfSeeds", aname="_noOfSeeds", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="notOfLocalLeechers", aname="_notOfLocalLeechers", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="torrentHash", aname="_torrentHash", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="torrentURL", aname="_torrentURL", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._available = None
                    self._noOfLeechers = None
                    self._noOfLocalSeeds = None
                    self._noOfSeeds = None
                    self._notOfLocalLeechers = None
                    self._torrentHash = None
                    self._torrentURL = None
                    return
            Holder.__name__ = "torrentStat_Holder"
            self.pyclass = Holder

    class activeInTorrents_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "activeInTorrents")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.activeInTorrents_Def.schema
            TClist = [ZSI.TC.String(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = []
                    return
            Holder.__name__ = "activeInTorrents_Holder"
            self.pyclass = Holder

    class activeInTorrentsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "activeInTorrentsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.activeInTorrentsResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "activeInTorrentsResponse_Holder"
            self.pyclass = Holder

    class getPeerList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "getPeerList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getPeerList_Def.schema
            TClist = [ZSI.TC.String(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="arg1", aname="_arg1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="arg2", aname="_arg2", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    self._arg1 = None
                    self._arg2 = None
                    return
            Holder.__name__ = "getPeerList_Holder"
            self.pyclass = Holder

    class getPeerListResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "getPeerListResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getPeerListResponse_Def.schema
            TClist = [GTD("http://iop.ws.sis.smoothit.eu/","response",lazy=False)(pname=(ns,"response"), aname="_response", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._response = None
                    return
            Holder.__name__ = "getPeerListResponse_Holder"
            self.pyclass = Holder

    class response_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "response")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.response_Def.schema
            TClist = [GTD("http://iop.ws.sis.smoothit.eu/","responseEntry",lazy=False)(pname="entries", aname="_entries", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="extentions", aname="_extentions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._entries = []
                    self._extentions = []
                    return
            Holder.__name__ = "response_Holder"
            self.pyclass = Holder

    class responseEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "responseEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.responseEntry_Def.schema
            TClist = [ZSI.TC.String(pname="extentions", aname="_extentions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipAddress", aname="_ipAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="preference", aname="_preference", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._extentions = []
                    self._ipAddress = None
                    self._preference = None
                    return
            Holder.__name__ = "responseEntry_Holder"
            self.pyclass = Holder

    class getTorrentStats_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "getTorrentStats")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getTorrentStats_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="arg0", aname="_arg0", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    return
            Holder.__name__ = "getTorrentStats_Holder"
            self.pyclass = Holder

    class getTorrentStatsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://iop.ws.sis.smoothit.eu/"
        type = (schema, "getTorrentStatsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getTorrentStatsResponse_Def.schema
            TClist = [GTD("http://iop.ws.sis.smoothit.eu/","torrentStat",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getTorrentStatsResponse_Holder"
            self.pyclass = Holder

    class activeInTorrents_Dec(ElementDeclaration):
        literal = "activeInTorrents"
        schema = "http://iop.ws.sis.smoothit.eu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://iop.ws.sis.smoothit.eu/","activeInTorrents")
            kw["aname"] = "_activeInTorrents"
            if ns0.activeInTorrents_Def not in ns0.activeInTorrents_Dec.__bases__:
                bases = list(ns0.activeInTorrents_Dec.__bases__)
                bases.insert(0, ns0.activeInTorrents_Def)
                ns0.activeInTorrents_Dec.__bases__ = tuple(bases)

            ns0.activeInTorrents_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "activeInTorrents_Dec_Holder"

    class activeInTorrentsResponse_Dec(ElementDeclaration):
        literal = "activeInTorrentsResponse"
        schema = "http://iop.ws.sis.smoothit.eu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://iop.ws.sis.smoothit.eu/","activeInTorrentsResponse")
            kw["aname"] = "_activeInTorrentsResponse"
            if ns0.activeInTorrentsResponse_Def not in ns0.activeInTorrentsResponse_Dec.__bases__:
                bases = list(ns0.activeInTorrentsResponse_Dec.__bases__)
                bases.insert(0, ns0.activeInTorrentsResponse_Def)
                ns0.activeInTorrentsResponse_Dec.__bases__ = tuple(bases)

            ns0.activeInTorrentsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "activeInTorrentsResponse_Dec_Holder"

    class getPeerList_Dec(ElementDeclaration):
        literal = "getPeerList"
        schema = "http://iop.ws.sis.smoothit.eu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://iop.ws.sis.smoothit.eu/","getPeerList")
            kw["aname"] = "_getPeerList"
            if ns0.getPeerList_Def not in ns0.getPeerList_Dec.__bases__:
                bases = list(ns0.getPeerList_Dec.__bases__)
                bases.insert(0, ns0.getPeerList_Def)
                ns0.getPeerList_Dec.__bases__ = tuple(bases)

            ns0.getPeerList_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getPeerList_Dec_Holder"

    class getPeerListResponse_Dec(ElementDeclaration):
        literal = "getPeerListResponse"
        schema = "http://iop.ws.sis.smoothit.eu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://iop.ws.sis.smoothit.eu/","getPeerListResponse")
            kw["aname"] = "_getPeerListResponse"
            if ns0.getPeerListResponse_Def not in ns0.getPeerListResponse_Dec.__bases__:
                bases = list(ns0.getPeerListResponse_Dec.__bases__)
                bases.insert(0, ns0.getPeerListResponse_Def)
                ns0.getPeerListResponse_Dec.__bases__ = tuple(bases)

            ns0.getPeerListResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getPeerListResponse_Dec_Holder"

    class getStats_Dec(ElementDeclaration):
        literal = "getStats"
        schema = "http://iop.ws.sis.smoothit.eu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://iop.ws.sis.smoothit.eu/","getStats")
            kw["aname"] = "_getStats"
            if ns0.getStats_Def not in ns0.getStats_Dec.__bases__:
                bases = list(ns0.getStats_Dec.__bases__)
                bases.insert(0, ns0.getStats_Def)
                ns0.getStats_Dec.__bases__ = tuple(bases)

            ns0.getStats_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getStats_Dec_Holder"

    class getStatsResponse_Dec(ElementDeclaration):
        literal = "getStatsResponse"
        schema = "http://iop.ws.sis.smoothit.eu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://iop.ws.sis.smoothit.eu/","getStatsResponse")
            kw["aname"] = "_getStatsResponse"
            if ns0.getStatsResponse_Def not in ns0.getStatsResponse_Dec.__bases__:
                bases = list(ns0.getStatsResponse_Dec.__bases__)
                bases.insert(0, ns0.getStatsResponse_Def)
                ns0.getStatsResponse_Dec.__bases__ = tuple(bases)

            ns0.getStatsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getStatsResponse_Dec_Holder"

    class getTorrentStats_Dec(ElementDeclaration):
        literal = "getTorrentStats"
        schema = "http://iop.ws.sis.smoothit.eu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://iop.ws.sis.smoothit.eu/","getTorrentStats")
            kw["aname"] = "_getTorrentStats"
            if ns0.getTorrentStats_Def not in ns0.getTorrentStats_Dec.__bases__:
                bases = list(ns0.getTorrentStats_Dec.__bases__)
                bases.insert(0, ns0.getTorrentStats_Def)
                ns0.getTorrentStats_Dec.__bases__ = tuple(bases)

            ns0.getTorrentStats_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getTorrentStats_Dec_Holder"

    class getTorrentStatsResponse_Dec(ElementDeclaration):
        literal = "getTorrentStatsResponse"
        schema = "http://iop.ws.sis.smoothit.eu/"
        def __init__(self, **kw):
            kw["pname"] = ("http://iop.ws.sis.smoothit.eu/","getTorrentStatsResponse")
            kw["aname"] = "_getTorrentStatsResponse"
            if ns0.getTorrentStatsResponse_Def not in ns0.getTorrentStatsResponse_Dec.__bases__:
                bases = list(ns0.getTorrentStatsResponse_Dec.__bases__)
                bases.insert(0, ns0.getTorrentStatsResponse_Def)
                ns0.getTorrentStatsResponse_Dec.__bases__ = tuple(bases)

            ns0.getTorrentStatsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getTorrentStatsResponse_Dec_Holder"

# end class ns0 (tns: http://iop.ws.sis.smoothit.eu/)
