##################################################
# file: ClientService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py -o SisClient/PeerSelection/WebService http://127.0.0.1:8080/sis/ClientEndpoint?wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://client.ws.sis.smoothit.eu/
##############################

class ns0:
    targetNamespace = "http://client.ws.sis.smoothit.eu/"

    class add_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://client.ws.sis.smoothit.eu/"
        type = (schema, "add")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.add_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="arg0", aname="_arg0", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="arg1", aname="_arg1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    self._arg1 = None
                    return
            Holder.__name__ = "add_Holder"
            self.pyclass = Holder

    class addResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://client.ws.sis.smoothit.eu/"
        type = (schema, "addResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.addResponse_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"sum"), aname="_sum", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._sum = None
                    return
            Holder.__name__ = "addResponse_Holder"
            self.pyclass = Holder

    class getRankedPeerList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://client.ws.sis.smoothit.eu/"
        type = (schema, "getRankedPeerList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getRankedPeerList_Def.schema
            TClist = [GTD("http://client.ws.sis.smoothit.eu/","request",lazy=False)(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    return
            Holder.__name__ = "getRankedPeerList_Holder"
            self.pyclass = Holder

    class request_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://client.ws.sis.smoothit.eu/"
        type = (schema, "request")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.request_Def.schema
            TClist = [GTD("http://client.ws.sis.smoothit.eu/","requestEntry",lazy=False)(pname="entries", aname="_entries", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="extentions", aname="_extentions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._entries = []
                    self._extentions = []
                    return
            Holder.__name__ = "request_Holder"
            self.pyclass = Holder

    class requestEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://client.ws.sis.smoothit.eu/"
        type = (schema, "requestEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.requestEntry_Def.schema
            TClist = [ZSI.TC.String(pname="extentions", aname="_extentions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipAddress", aname="_ipAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._extentions = []
                    self._ipAddress = None
                    return
            Holder.__name__ = "requestEntry_Holder"
            self.pyclass = Holder

    class getRankedPeerListResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://client.ws.sis.smoothit.eu/"
        type = (schema, "getRankedPeerListResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getRankedPeerListResponse_Def.schema
            TClist = [GTD("http://client.ws.sis.smoothit.eu/","response",lazy=False)(pname=(ns,"response"), aname="_response", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._response = None
                    return
            Holder.__name__ = "getRankedPeerListResponse_Holder"
            self.pyclass = Holder

    class response_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://client.ws.sis.smoothit.eu/"
        type = (schema, "response")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.response_Def.schema
            TClist = [GTD("http://client.ws.sis.smoothit.eu/","responseEntry",lazy=False)(pname="entries", aname="_entries", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="extentions", aname="_extentions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._entries = []
                    self._extentions = []
                    return
            Holder.__name__ = "response_Holder"
            self.pyclass = Holder

    class responseEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://client.ws.sis.smoothit.eu/"
        type = (schema, "responseEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.responseEntry_Def.schema
            TClist = [ZSI.TC.String(pname="extentions", aname="_extentions", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipAddress", aname="_ipAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="preference", aname="_preference", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._extentions = []
                    self._ipAddress = None
                    self._preference = None
                    return
            Holder.__name__ = "responseEntry_Holder"
            self.pyclass = Holder

    class getSimpleRankedPeerList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://client.ws.sis.smoothit.eu/"
        type = (schema, "getSimpleRankedPeerList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getSimpleRankedPeerList_Def.schema
            TClist = [GTD("http://client.ws.sis.smoothit.eu/","request",lazy=False)(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    return
            Holder.__name__ = "getSimpleRankedPeerList_Holder"
            self.pyclass = Holder

    class getSimpleRankedPeerListResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://client.ws.sis.smoothit.eu/"
        type = (schema, "getSimpleRankedPeerListResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.getSimpleRankedPeerListResponse_Def.schema
            TClist = [GTD("http://client.ws.sis.smoothit.eu/","response",lazy=False)(pname=(ns,"response"), aname="_response", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._response = None
                    return
            Holder.__name__ = "getSimpleRankedPeerListResponse_Holder"
            self.pyclass = Holder

    class add_Dec(ElementDeclaration):
        literal = "add"
        schema = "http://client.ws.sis.smoothit.eu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://client.ws.sis.smoothit.eu/","add")
            kw["aname"] = "_add"
            if ns0.add_Def not in ns0.add_Dec.__bases__:
                bases = list(ns0.add_Dec.__bases__)
                bases.insert(0, ns0.add_Def)
                ns0.add_Dec.__bases__ = tuple(bases)

            ns0.add_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "add_Dec_Holder"

    class addResponse_Dec(ElementDeclaration):
        literal = "addResponse"
        schema = "http://client.ws.sis.smoothit.eu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://client.ws.sis.smoothit.eu/","addResponse")
            kw["aname"] = "_addResponse"
            if ns0.addResponse_Def not in ns0.addResponse_Dec.__bases__:
                bases = list(ns0.addResponse_Dec.__bases__)
                bases.insert(0, ns0.addResponse_Def)
                ns0.addResponse_Dec.__bases__ = tuple(bases)

            ns0.addResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "addResponse_Dec_Holder"

    class getRankedPeerList_Dec(ElementDeclaration):
        literal = "getRankedPeerList"
        schema = "http://client.ws.sis.smoothit.eu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://client.ws.sis.smoothit.eu/","getRankedPeerList")
            kw["aname"] = "_getRankedPeerList"
            if ns0.getRankedPeerList_Def not in ns0.getRankedPeerList_Dec.__bases__:
                bases = list(ns0.getRankedPeerList_Dec.__bases__)
                bases.insert(0, ns0.getRankedPeerList_Def)
                ns0.getRankedPeerList_Dec.__bases__ = tuple(bases)

            ns0.getRankedPeerList_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getRankedPeerList_Dec_Holder"

    class getRankedPeerListResponse_Dec(ElementDeclaration):
        literal = "getRankedPeerListResponse"
        schema = "http://client.ws.sis.smoothit.eu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://client.ws.sis.smoothit.eu/","getRankedPeerListResponse")
            kw["aname"] = "_getRankedPeerListResponse"
            if ns0.getRankedPeerListResponse_Def not in ns0.getRankedPeerListResponse_Dec.__bases__:
                bases = list(ns0.getRankedPeerListResponse_Dec.__bases__)
                bases.insert(0, ns0.getRankedPeerListResponse_Def)
                ns0.getRankedPeerListResponse_Dec.__bases__ = tuple(bases)

            ns0.getRankedPeerListResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getRankedPeerListResponse_Dec_Holder"

    class getSimpleRankedPeerList_Dec(ElementDeclaration):
        literal = "getSimpleRankedPeerList"
        schema = "http://client.ws.sis.smoothit.eu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://client.ws.sis.smoothit.eu/","getSimpleRankedPeerList")
            kw["aname"] = "_getSimpleRankedPeerList"
            if ns0.getSimpleRankedPeerList_Def not in ns0.getSimpleRankedPeerList_Dec.__bases__:
                bases = list(ns0.getSimpleRankedPeerList_Dec.__bases__)
                bases.insert(0, ns0.getSimpleRankedPeerList_Def)
                ns0.getSimpleRankedPeerList_Dec.__bases__ = tuple(bases)

            ns0.getSimpleRankedPeerList_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getSimpleRankedPeerList_Dec_Holder"

    class getSimpleRankedPeerListResponse_Dec(ElementDeclaration):
        literal = "getSimpleRankedPeerListResponse"
        schema = "http://client.ws.sis.smoothit.eu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://client.ws.sis.smoothit.eu/","getSimpleRankedPeerListResponse")
            kw["aname"] = "_getSimpleRankedPeerListResponse"
            if ns0.getSimpleRankedPeerListResponse_Def not in ns0.getSimpleRankedPeerListResponse_Dec.__bases__:
                bases = list(ns0.getSimpleRankedPeerListResponse_Dec.__bases__)
                bases.insert(0, ns0.getSimpleRankedPeerListResponse_Def)
                ns0.getSimpleRankedPeerListResponse_Dec.__bases__ = tuple(bases)

            ns0.getSimpleRankedPeerListResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getSimpleRankedPeerListResponse_Dec_Holder"

# end class ns0 (tns: http://client.ws.sis.smoothit.eu/)
