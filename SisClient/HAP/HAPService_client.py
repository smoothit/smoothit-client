##################################################
# file: HAPService_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     /usr/bin/wsdl2py --complexType HAPEndpoint.wsdl
# 
##################################################

from HAPService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class HAPServiceLocator:
    HAPServicePort_address = "http://pcdpd176:8080/sis/HAPEndpoint"
    def getHAPServicePortAddress(self):
        return HAPServiceLocator.HAPServicePort_address
    def getHAPServicePort(self, url=None, **kw):
        return SisHAPPortBindingSOAP(url or HAPServiceLocator.HAPServicePort_address, **kw)

# Methods
class SisHAPPortBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: reportActivity
    def reportActivity(self, request, **kw):
        if isinstance(request, SisHAPPort_reportActivity) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(SisHAPPort_reportActivityResponse.typecode)
        return response

SisHAPPort_reportActivity = GED("http://hap.ws.sis.smoothit.eu/", "reportActivity").pyclass

SisHAPPort_reportActivityResponse = GED("http://hap.ws.sis.smoothit.eu/", "reportActivityResponse").pyclass
