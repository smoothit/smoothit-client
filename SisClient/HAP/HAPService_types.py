##################################################
# file: HAPService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py --complexType HAPEndpoint.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://hap.ws.sis.smoothit.eu/
##############################

class ns0:
    targetNamespace = "http://hap.ws.sis.smoothit.eu/"

    class reportActivity_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://hap.ws.sis.smoothit.eu/"
        type = (schema, "reportActivity")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.reportActivity_Def.schema
            TClist = [GTD("http://hap.ws.sis.smoothit.eu/","peerStats",lazy=False)(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    return
            Holder.__name__ = "reportActivity_Holder"
            self.pyclass = Holder

    class peerStats_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://hap.ws.sis.smoothit.eu/"
        type = (schema, "peerStats")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.peerStats_Def.schema
            TClist = [ZSI.TC.String(pname="ipAddress", aname="_ipAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://hap.ws.sis.smoothit.eu/","neighborStats",lazy=False)(pname="neighbors", aname="_neighbors", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="port", aname="_port", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ipAddress = None
                    self._neighbors = []
                    self._port = None
                    return
            Holder.__name__ = "peerStats_Holder"
            self.pyclass = Holder

    class neighborStats_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://hap.ws.sis.smoothit.eu/"
        type = (schema, "neighborStats")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.neighborStats_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="downVolume", aname="_downVolume", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ipAddress", aname="_ipAddress", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="upVolume", aname="_upVolume", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._downVolume = None
                    self._ipAddress = None
                    self._upVolume = None
                    return
            Holder.__name__ = "neighborStats_Holder"
            self.pyclass = Holder

    class reportActivityResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://hap.ws.sis.smoothit.eu/"
        type = (schema, "reportActivityResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.reportActivityResponse_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "reportActivityResponse_Holder"
            self.pyclass = Holder

    class reportActivity_Dec(ElementDeclaration):
        literal = "reportActivity"
        schema = "http://hap.ws.sis.smoothit.eu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://hap.ws.sis.smoothit.eu/","reportActivity")
            kw["aname"] = "_reportActivity"
            if ns0.reportActivity_Def not in ns0.reportActivity_Dec.__bases__:
                bases = list(ns0.reportActivity_Dec.__bases__)
                bases.insert(0, ns0.reportActivity_Def)
                ns0.reportActivity_Dec.__bases__ = tuple(bases)

            ns0.reportActivity_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "reportActivity_Dec_Holder"

    class reportActivityResponse_Dec(ElementDeclaration):
        literal = "reportActivityResponse"
        schema = "http://hap.ws.sis.smoothit.eu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://hap.ws.sis.smoothit.eu/","reportActivityResponse")
            kw["aname"] = "_reportActivityResponse"
            if ns0.reportActivityResponse_Def not in ns0.reportActivityResponse_Dec.__bases__:
                bases = list(ns0.reportActivityResponse_Dec.__bases__)
                bases.insert(0, ns0.reportActivityResponse_Def)
                ns0.reportActivityResponse_Dec.__bases__ = tuple(bases)

            ns0.reportActivityResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "reportActivityResponse_Dec_Holder"

# end class ns0 (tns: http://hap.ws.sis.smoothit.eu/)
